[{"C:\\ueK223_Gruppe5_Frontend\\src\\index.tsx":"1","C:\\ueK223_Gruppe5_Frontend\\src\\App.tsx":"2","C:\\ueK223_Gruppe5_Frontend\\src\\Contexts\\ActiveUserContext.tsx":"3","C:\\ueK223_Gruppe5_Frontend\\src\\Router\\Router.tsx":"4","C:\\ueK223_Gruppe5_Frontend\\src\\Services\\AuthorityService.ts":"5","C:\\ueK223_Gruppe5_Frontend\\src\\config\\Api.ts":"6","C:\\ueK223_Gruppe5_Frontend\\src\\Services\\UserService.ts":"7","C:\\ueK223_Gruppe5_Frontend\\src\\Router\\PrivateRoute.tsx":"8","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx":"9","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\HomePage.tsx":"10","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UserPage\\UserTable.tsx":"11","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UserPage\\UserPage.tsx":"12","C:\\ueK223_Gruppe5_Frontend\\src\\Services\\ImageService.tsx":"13","C:\\ueK223_Gruppe5_Frontend\\src\\components\\atoms\\LikeButton.tsx":"14","C:\\ueK223_Gruppe5_Frontend\\src\\components\\atoms\\NavBar.tsx":"15","C:\\ueK223_Gruppe5_Frontend\\src\\components\\molecules\\UserForm\\UserForm.tsx":"16","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\CreateImage.tsx":"17","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UpdateImage.tsx":"18","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UserPage\\UserPosts.tsx":"19"},{"size":382,"mtime":1694162699609,"results":"20","hashOfConfig":"21"},{"size":316,"mtime":1694162699601,"results":"22","hashOfConfig":"21"},{"size":6317,"mtime":1694162699601,"results":"23","hashOfConfig":"21"},{"size":1746,"mtime":1694613202031,"results":"24","hashOfConfig":"21"},{"size":1178,"mtime":1694162699602,"results":"25","hashOfConfig":"21"},{"size":1817,"mtime":1694162699608,"results":"26","hashOfConfig":"21"},{"size":653,"mtime":1694162699603,"results":"27","hashOfConfig":"21"},{"size":2385,"mtime":1694162699601,"results":"28","hashOfConfig":"21"},{"size":3205,"mtime":1695285185954,"results":"29","hashOfConfig":"21"},{"size":2549,"mtime":1694613726148,"results":"30","hashOfConfig":"21"},{"size":2207,"mtime":1694614126084,"results":"31","hashOfConfig":"21"},{"size":1114,"mtime":1694162699607,"results":"32","hashOfConfig":"21"},{"size":1338,"mtime":1694612403657,"results":"33","hashOfConfig":"21"},{"size":571,"mtime":1694613735726,"results":"34","hashOfConfig":"21"},{"size":5913,"mtime":1694613980204,"results":"35","hashOfConfig":"21"},{"size":3361,"mtime":1694423106667,"results":"36","hashOfConfig":"21"},{"size":1799,"mtime":1694590191546,"results":"37","hashOfConfig":"21"},{"size":2241,"mtime":1694612403658,"results":"38","hashOfConfig":"21"},{"size":1284,"mtime":1694614810483,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"nohuvx",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},"C:\\ueK223_Gruppe5_Frontend\\src\\index.tsx",[],["85","86"],"C:\\ueK223_Gruppe5_Frontend\\src\\App.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\Contexts\\ActiveUserContext.tsx",["87"],"import { createContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n","C:\\ueK223_Gruppe5_Frontend\\src\\Router\\Router.tsx",["88"],"import { Route, Routes } from \"react-router-dom\";\r\nimport LoginPage from \"../components/pages/LoginPage/LoginPage\";\r\nimport PrivateRoute from \"./PrivateRoute\";\r\nimport UserTable from \"../components/pages/UserPage/UserTable\";\r\nimport UserPage from \"../components/pages/UserPage/UserPage\";\r\nimport Login from \"../components/pages/LoginPage/LoginPage\";\r\nimport HomePage from \"../components/pages/HomePage\";\r\nimport CreateImage from \"../components/pages/CreateImage\";\r\nimport UpdateImage from \"../components/pages/UpdateImage\";\r\nimport UserPosts from \"../components/pages/UserPage/UserPosts\";\r\n\r\n/**\r\n * Router component renders a route switch with all available pages\r\n */\r\n\r\nconst Router = () => {\r\n  //const { checkRole } = useContext(ActiveUserContext);\r\n\r\n  /** navigate to different \"home\"-locations depending on Role the user have */\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path={\"/\"} element={<HomePage />} />\r\n      <Route path={\"/Login\"} element={<LoginPage/>} />\r\n      <Route path={\"/add\"} element={<CreateImage/>} />\r\n      <Route path={\"/editimage/:imageId\"} element={<UpdateImage/>} />\r\n      <Route path={\"/users/:userId/posts\"} element={<UserPosts/>} />\r\n\r\n      <Route\r\n        path={\"/users\"}\r\n        element={<PrivateRoute authorities={[]} element={<UserTable />} />}\r\n      />\r\n      \r\n      <Route\r\n        path=\"/useredit\"\r\n        element={\r\n          <PrivateRoute authorities={[]} element={<UserPage />}></PrivateRoute>\r\n        }\r\n      />\r\n      <Route\r\n        path=\"/useredit/:userId\"\r\n        element={\r\n          <PrivateRoute authorities={[]} element={<UserPage />}></PrivateRoute>\r\n        }\r\n      />\r\n\r\n      <Route path=\"*\" element={<div>Not Found</div>} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default Router;\r\n","C:\\ueK223_Gruppe5_Frontend\\src\\Services\\AuthorityService.ts",[],"C:\\ueK223_Gruppe5_Frontend\\src\\config\\Api.ts",[],"C:\\ueK223_Gruppe5_Frontend\\src\\Services\\UserService.ts",[],"C:\\ueK223_Gruppe5_Frontend\\src\\Router\\PrivateRoute.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\LoginPage\\LoginPage.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\HomePage.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UserPage\\UserTable.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UserPage\\UserPage.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\Services\\ImageService.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\atoms\\LikeButton.tsx",["89","90"],"import * as React from 'react';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\r\nimport Favorite from '@mui/icons-material/Favorite';\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport BookmarkIcon from '@mui/icons-material/Bookmark';\r\n\r\nconst label = { inputProps: { 'aria-label': 'Checkbox demo' } };\r\n\r\nexport default function IconCheckboxes() {\r\n  return (\r\n    <div>\r\n      <Checkbox {...label} icon={<FavoriteBorder />} checkedIcon={<Favorite />} />\r\n    </div>\r\n  );\r\n}\r\n","C:\\ueK223_Gruppe5_Frontend\\src\\components\\atoms\\NavBar.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\molecules\\UserForm\\UserForm.tsx",[],"C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\CreateImage.tsx",["91","92"],"import { useFormik } from \"formik\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport ImageService from \"../../Services/ImageService\";\r\nimport { useContext } from \"react\";\r\nimport ActiveUserContext from \"../../Contexts/ActiveUserContext\";\r\n\r\nexport default function CreateImage() {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const context = useContext(ActiveUserContext);\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      image: \"\",\r\n      description: \"\",\r\n    },\r\n    onSubmit: (values) => {\r\n      handleSubmit(values.image, values.description);\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (image:string, description:string) => {\r\n    if(context.user){ImageService.createImage({ image:image, description:description, author:context.user})\r\n      .then((response) => {\r\n        console.log(\"response\", response);\r\n        navigate(\"/\");\r\n      })\r\n      .catch((e) => {\r\n        postMessage(e.response.data);\r\n      });}\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <div>\r\n        <h1>New Image</h1>\r\n        <label htmlFor=\"image\">Image</label>\r\n        <input\r\n          id=\"image\"\r\n          name=\"image\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.image}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"description\">description</label>\r\n        <input\r\n          id=\"description\"\r\n          name=\"description\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.description}\r\n        />\r\n      </div>\r\n      <button type=\"submit\">add</button>\r\n      <button type=\"submit\" > <a href=\"/\"/>cancel</button>\r\n\r\n    </form>\r\n  );\r\n}","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UpdateImage.tsx",["93"],"import { useFormik } from \"formik\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport ImageService, { Image_Post } from \"../../Services/ImageService\";\r\nimport { useEffect, useState } from \"react\";\r\nimport React from \"react\";\r\n\r\n\r\nexport default function UpdateImage(){\r\n  const{imageId}=useParams();\r\n  const navigate = useNavigate();\r\n  const [images, setImages] = useState<Image_Post[]>([]);\r\n\r\nconst formik = useFormik({\r\n  initialValues: {\r\n      id: imageId??\"\",\r\n  image: \"\",\r\n  description: \"\"\r\n  },\r\n  onSubmit: (values) => {\r\n    handleSubmit(values.image, values.description);\r\n  },\r\n});\r\n\r\nuseEffect(() => {\r\n    ImageService.getImageById(imageId ?? \"\").then((data) => {\r\n     setImages(data);\r\n     console.log(images)\r\n      formik.setValues({\r\n        id: imageId ?? \"\",\r\n        image: data.image, \r\n        description: data.description, \r\n      });\r\n    });\r\n  }, []);\r\n\r\n  \r\nconst handleSubmit = (image:string,description:string)=>{\r\n    console.log(\"test\",imageId)\r\n    ImageService.updateImage({\r\n        id: imageId??\"\", image: image, description: description,\r\n        likes: 0,\r\n        author: {\r\n            id: \"\",\r\n            email: \"\",\r\n            firstName: \"\",\r\n            lastName: \"\",\r\n            roles: []\r\n        }\r\n        })\r\n     .then((response) => {\r\n        console.log(\"response\", response);\r\n        navigate(`/editimage/${imageId}`);\r\n      })\r\n      .catch((e) => {\r\n        postMessage(e.response.data);\r\n      });\r\n  }\r\nreturn(\r\n    <form onSubmit={formik.handleSubmit}>\r\n      <div>\r\n        <h1>Update Image</h1>\r\n        <label htmlFor=\"image\">image</label>\r\n        <input\r\n          id=\"image\"\r\n          name=\"image\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.image}\r\n        />\r\n      </div>\r\n      <div>\r\n        <label htmlFor=\"description\">description</label>\r\n        <input\r\n          id=\"description\"\r\n          name=\"description\"\r\n          type=\"text\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          value={formik.values.description}\r\n        />\r\n      </div>\r\n      <button type=\"submit\">send</button>\r\n    </form>\r\n);\r\n}","C:\\ueK223_Gruppe5_Frontend\\src\\components\\pages\\UserPage\\UserPosts.tsx",["94","95","96","97","98","99","100","101"],"import { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport UserService from \"../../../Services/UserService\";\r\nimport { User } from \"../../../types/models/User.model\";\r\nimport NavBar from \"../../atoms/NavBar\";\r\nimport { Box, Grid, Paper } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport ImageService, { Image_Post } from \"../../../Services/ImageService\";\r\nimport LikeButton from \"../../atoms/LikeButton\";\r\n\r\nconst UserPosts = ()=> {\r\n    const{id}=useParams();\r\n    const [user, setUser] = useState<User>();\r\n\r\n    useEffect(() => {\r\n        UserService.getUser(id ?? \"\").then((data) => {\r\n         setUser(data);\r\n        });\r\n      }, []);\r\n\r\n      const [images, setImage] = React.useState([]);\r\n  React.useEffect(() => {\r\n    const service = ImageService;\r\n    service\r\n      .getAllImages()\r\n      .then((data: React.SetStateAction<never[]>) => {\r\n        console.log(data);\r\n        setImage(data);\r\n      })\r\n      .catch((error: any) => {\r\n        console.error(\"Fehler beim Abrufen der Bilder: \", error);\r\n      });\r\n  }, []);\r\n\r\n\r\n     \r\n    return(\r\n        <div>\r\n            <NavBar />\r\n            {\r\n            <Box>\r\n              \r\n            </Box>\r\n}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UserPosts;",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":172,"column":6,"nodeType":"108","endLine":172,"endColumn":8,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":13},{"ruleId":"110","severity":1,"message":"114","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":26},{"ruleId":"110","severity":1,"message":"115","line":6,"column":8,"nodeType":"112","messageId":"113","endLine":6,"endColumn":20},{"ruleId":"110","severity":1,"message":"116","line":8,"column":11,"nodeType":"112","messageId":"113","endLine":8,"endColumn":13},{"ruleId":"117","severity":1,"message":"118","line":59,"column":31,"nodeType":"119","endLine":59,"endColumn":44},{"ruleId":"106","severity":1,"message":"120","line":34,"column":6,"nodeType":"108","endLine":34,"endColumn":8,"suggestions":"121"},{"ruleId":"110","severity":1,"message":"122","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":14},{"ruleId":"110","severity":1,"message":"123","line":6,"column":15,"nodeType":"112","messageId":"113","endLine":6,"endColumn":19},{"ruleId":"110","severity":1,"message":"124","line":6,"column":21,"nodeType":"112","messageId":"113","endLine":6,"endColumn":26},{"ruleId":"110","severity":1,"message":"125","line":8,"column":24,"nodeType":"112","messageId":"113","endLine":8,"endColumn":34},{"ruleId":"110","severity":1,"message":"126","line":9,"column":8,"nodeType":"112","messageId":"113","endLine":9,"endColumn":18},{"ruleId":"110","severity":1,"message":"127","line":13,"column":12,"nodeType":"112","messageId":"113","endLine":13,"endColumn":16},{"ruleId":"106","severity":1,"message":"128","line":19,"column":10,"nodeType":"108","endLine":19,"endColumn":12,"suggestions":"129"},{"ruleId":"110","severity":1,"message":"130","line":21,"column":14,"nodeType":"112","messageId":"113","endLine":21,"endColumn":20},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadActiveUser'. Either include it or remove the dependency array.","ArrayExpression",["133"],"@typescript-eslint/no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'BookmarkBorderIcon' is defined but never used.","'BookmarkIcon' is defined but never used.","'id' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'formik', 'imageId', and 'images'. Either include them or remove the dependency array.",["134"],"'Link' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'Image_Post' is defined but never used.","'LikeButton' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["135"],"'images' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [loadActiveUser]",{"range":"142","text":"143"},"Update the dependencies array to be: [formik, imageId, images]",{"range":"144","text":"145"},"Update the dependencies array to be: [id]",{"range":"146","text":"147"},[5561,5563],"[loadActiveUser]",[899,901],"[formik, imageId, images]",[693,695],"[id]"]