{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aurora Gjemaj\\\\ueK223_Gruppe5_Frontend\\\\src\\\\Router\\\\PrivateRoute.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport * as jwt from 'jsonwebtoken';\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\nimport AuthorityService from '../Services/AuthorityService';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  element: RouteComponent,\n  authorities\n}) => {\n  _s();\n  const activeUserContext = useContext(ActiveUserContext);\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\n  const isLoggedIn = () => {\n    let tokenString = localStorage.getItem('token');\n    if (!tokenString) {\n      console.error('no token found');\n      return false;\n    }\n    tokenString = tokenString.replace('Bearer ', '');\n    const token = jwt.decode(tokenString);\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\n      return false;\n    }\n    return true;\n  };\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\n  if (!isLoggedIn()) {\n    activeUserContext.logout();\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\n  const hasNeededAuthorities = authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\n\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\n  if (!hasNeededAuthorities) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/unauthorized\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n\n  // All checks passed\n  return (\n    /*#__PURE__*/\n    //Pagelayout puts the Navigation, Menu etc. around the component\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: activeUserContext.logout,\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), RouteComponent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(PrivateRoute, \"wdhA4Qt3NqraFBKHkqonDQOIMPc=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useContext","Navigate","jwt","ActiveUserContext","AuthorityService","Button","jsxDEV","_jsxDEV","PrivateRoute","element","RouteComponent","authorities","_s","activeUserContext","isLoggedIn","tokenString","localStorage","getItem","console","error","replace","token","decode","exp","Date","now","logout","to","fileName","_jsxFileName","lineNumber","columnNumber","hasNeededAuthorities","length","some","hasAuthority","children","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/Router/PrivateRoute.tsx"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport ActiveUserContext from '../Contexts/ActiveUserContext';\r\nimport AuthorityService from '../Services/AuthorityService';\r\nimport { Authority } from '../types/models/Authority.model';\r\nimport { Button } from '@mui/material';\r\n\r\ninterface Props {\r\n  element: React.ReactElement;\r\n  authorities: Authority[];\r\n}\r\n\r\ntype JWTType = {\r\n  iss: string;\r\n  exp: number;\r\n};\r\n\r\nconst PrivateRoute: React.FC<Props> = ({\r\n  element: RouteComponent,\r\n  authorities,\r\n}) => {\r\n  const activeUserContext = useContext(ActiveUserContext);\r\n  /**\r\n   * isLoggedIn checks if the token, which is saved inside the localStorage,\r\n   * exists, isn't expired yet and has been issued by the correct issuer.\r\n   * If all of the above is true the user is seen as logged in.\r\n   */\r\n  const isLoggedIn = () => {\r\n    let tokenString = localStorage.getItem('token');\r\n    if (!tokenString) {\r\n      console.error('no token found');\r\n      return false;\r\n    }\r\n    tokenString = tokenString.replace('Bearer ', '');\r\n    const token: JWTType = jwt.decode(tokenString) as JWTType;\r\n    // Check if token does not exist or doesn't have an expiration claim or is expired.\r\n    if (!token || !token.exp || token.exp < Date.now() / 1000) {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n  /**\r\n   * If the user is not logged in call activeUserContext.logout, which destroys\r\n   * all locally saved user data and redirects to /login.\r\n   */\r\n  if (!isLoggedIn()) {\r\n    activeUserContext.logout();\r\n    return <Navigate to='/login' replace={true} />;\r\n  }\r\n  /**\r\n   * Check if the active user has at least 1 of the needed authorities.\r\n   * If no authorities are needed true is returned.\r\n   */\r\n  const hasNeededAuthorities =\r\n    authorities.length === 0 || authorities.some(AuthorityService.hasAuthority);\r\n\r\n  /**\r\n   * If the user doesn't possess the needed authorities Redirect the user to\r\n   * /unauthorized\r\n   */\r\n  if (!hasNeededAuthorities) {\r\n    return <Navigate to='/unauthorized' replace={true} />;\r\n  }\r\n\r\n  // All checks passed\r\n  return (\r\n    //Pagelayout puts the Navigation, Menu etc. around the component\r\n    <div>\r\n      <Button onClick={activeUserContext.logout}>Logout</Button>\r\n      {RouteComponent}\r\n    </div>\r\n  );\r\n};\r\nexport default PrivateRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAO,KAAKC,GAAG,MAAM,cAAc;AACnC,OAAOC,iBAAiB,MAAM,+BAA+B;AAC7D,OAAOC,gBAAgB,MAAM,8BAA8B;AAE3D,SAASC,MAAM,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYvC,MAAMC,YAA6B,GAAGA,CAAC;EACrCC,OAAO,EAAEC,cAAc;EACvBC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,iBAAiB,GAAGb,UAAU,CAACG,iBAAiB,CAAC;EACvD;AACF;AACA;AACA;AACA;EACE,MAAMW,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/C,IAAI,CAACF,WAAW,EAAE;MAChBG,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAC;MAC/B,OAAO,KAAK;IACd;IACAJ,WAAW,GAAGA,WAAW,CAACK,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IAChD,MAAMC,KAAc,GAAGnB,GAAG,CAACoB,MAAM,CAACP,WAAW,CAAY;IACzD;IACA,IAAI,CAACM,KAAK,IAAI,CAACA,KAAK,CAACE,GAAG,IAAIF,KAAK,CAACE,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;MACzD,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb,CAAC;EACD;AACF;AACA;AACA;EACE,IAAI,CAACX,UAAU,CAAC,CAAC,EAAE;IACjBD,iBAAiB,CAACa,MAAM,CAAC,CAAC;IAC1B,oBAAOnB,OAAA,CAACN,QAAQ;MAAC0B,EAAE,EAAC,QAAQ;MAACP,OAAO,EAAE;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAChD;EACA;AACF;AACA;AACA;EACE,MAAMC,oBAAoB,GACxBrB,WAAW,CAACsB,MAAM,KAAK,CAAC,IAAItB,WAAW,CAACuB,IAAI,CAAC9B,gBAAgB,CAAC+B,YAAY,CAAC;;EAE7E;AACF;AACA;AACA;EACE,IAAI,CAACH,oBAAoB,EAAE;IACzB,oBAAOzB,OAAA,CAACN,QAAQ;MAAC0B,EAAE,EAAC,eAAe;MAACP,OAAO,EAAE;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACvD;;EAEA;EACA;IAAA;IACE;IACAxB,OAAA;MAAA6B,QAAA,gBACE7B,OAAA,CAACF,MAAM;QAACgC,OAAO,EAAExB,iBAAiB,CAACa,MAAO;QAAAU,QAAA,EAAC;MAAM;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACzDrB,cAAc;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ;EAAC;AAEV,CAAC;AAACnB,EAAA,CAvDIJ,YAA6B;AAAA8B,EAAA,GAA7B9B,YAA6B;AAwDnC,eAAeA,YAAY;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}