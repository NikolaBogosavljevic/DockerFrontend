{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aurora Gjemaj\\\\ueK223_Gruppe5_Frontend\\\\src\\\\Contexts\\\\ActiveUserContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport api from \"../config/Api\";\nimport AuthorityService from \"../Services/AuthorityService\";\nimport UserService from \"../Services/UserService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\n\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\n\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\nconst noContextProviderFound = () => {\n  throw new Error(\"No provider for the ActiveUserContext found\");\n};\n\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\nconst defaultContextValue = {\n  user: null,\n  login: noContextProviderFound,\n  logout: noContextProviderFound,\n  setActiveUser: noContextProviderFound,\n  loadActiveUser: noContextProviderFound,\n  checkRole: noContextProviderFound\n};\n\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\nconst ActiveUserContext = /*#__PURE__*/createContext(defaultContextValue);\nexport default ActiveUserContext;\n\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\n\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\nexport const ActiveUserContextProvider = ({\n  children\n}) => {\n  _s();\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\n  const loadSavedUserData = () => {\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\n    if (storeUser === null) return null;\n    return JSON.parse(storeUser);\n  };\n\n  // The following line defines the user state which is holding the user\n  // data inside this context.\n  const [user, setUser] = useState(() => loadSavedUserData());\n  const navigate = useNavigate();\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\n  const setActiveUser = updatedUser => {\n    setUser(updatedUser);\n    localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(updatedUser));\n  };\n\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\n  const resetAuthorization = () => {\n    // Reset the stored data inside the AuthorityService.\n    AuthorityService.clearAuthorities();\n    // Clear all data from the localStorage.\n    localStorage.clear();\n    // Set the user, which is stored inside the context to null.\n    setUser(null);\n  };\n\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\n  const logout = () => {\n    // If no token is saved inside the local storage clear the localStorage directly\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\n      resetAuthorization();\n      return;\n    }\n    // If a token is present send a logout-request and clear the localStorage afterwards\n    api.get(\"/logout\").finally(resetAuthorization);\n    //navigate to login page\n    navigate(\"/login\");\n  };\n\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\n  const login = async (email, password) => {\n    await api.post(\"user/login\", {\n      email,\n      password\n    }).then(response => {\n      console.log(response.headers.authorization);\n      localStorage.setItem(TOKEN_LOCAL_STORAGE_KEY, response.headers.authorization);\n      setActiveUser(response.data);\n      return true;\n    });\n    return false;\n  };\n\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\n  const loadActiveUser = () => {\n    return user ? UserService.getUser(user.id).then(res => {\n      setActiveUser(res);\n    }) : null;\n  };\n  function activeUserHasRole(roleToCheck) {\n    return user ? user.roles.some(role => role.name === roleToCheck) : false;\n  }\n\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\n  useEffect(() => {\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\n    if (token !== null) {\n      loadActiveUser();\n    }\n  }, []);\n\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\n  useEffect(() => {\n    if (user !== null) {\n      AuthorityService.initAuthoritySet(user);\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ActiveUserContext.Provider, {\n      value: {\n        user,\n        setActiveUser,\n        login,\n        logout,\n        loadActiveUser,\n        checkRole: activeUserHasRole\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n_s(ActiveUserContextProvider, \"85GMiSMJirh4brJsJOH2u1Uf5Zw=\", false, function () {\n  return [useNavigate];\n});\n_c = ActiveUserContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ActiveUserContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","useNavigate","api","AuthorityService","UserService","jsxDEV","_jsxDEV","USER_DATA_LOCAL_STORAGE_KEY","TOKEN_LOCAL_STORAGE_KEY","noContextProviderFound","Error","defaultContextValue","user","login","logout","setActiveUser","loadActiveUser","checkRole","ActiveUserContext","ActiveUserContextProvider","children","_s","loadSavedUserData","storeUser","localStorage","getItem","JSON","parse","setUser","navigate","updatedUser","setItem","stringify","resetAuthorization","clearAuthorities","clear","get","finally","email","password","post","then","response","console","log","headers","authorization","data","getUser","id","res","activeUserHasRole","roleToCheck","roles","some","role","name","token","initAuthoritySet","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/Contexts/ActiveUserContext.tsx"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport api from \"../config/Api\";\r\nimport roles from \"../config/Roles\";\r\nimport AuthorityService from \"../Services/AuthorityService\";\r\nimport UserService from \"../Services/UserService\";\r\nimport { User } from \"../types/models/User.model\";\r\nimport { Nullable } from \"../types/Nullable\";\r\n\r\n/**\r\n * USER_DATA_LOCAL_STORAGE_KEY defines the localStorageKey in which the\r\n * activeUser gets stored.\r\n */\r\nexport const USER_DATA_LOCAL_STORAGE_KEY = \"user\";\r\nexport const TOKEN_LOCAL_STORAGE_KEY = \"token\";\r\n\r\n/**\r\n * ActiveUserContextType defines the provided values\r\n */\r\nexport type ActiveUserContextType = {\r\n  user: Nullable<User>;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  setActiveUser: (user: User) => void;\r\n  loadActiveUser: () => void;\r\n  checkRole: (roleToCheck: keyof typeof roles) => boolean;\r\n};\r\n\r\n/**\r\n * noContextProviderFound is a method that throws an error and is used\r\n * inside the defaultContextValue\r\n */\r\nconst noContextProviderFound = () => {\r\n  throw new Error(\"No provider for the ActiveUserContext found\");\r\n};\r\n\r\n/**\r\n * defaultContextValue defines the default values for the ActiveUserContext.\r\n */\r\nconst defaultContextValue: ActiveUserContextType = {\r\n  user: null,\r\n  login: noContextProviderFound,\r\n  logout: noContextProviderFound,\r\n  setActiveUser: noContextProviderFound,\r\n  loadActiveUser: noContextProviderFound,\r\n  checkRole: noContextProviderFound,\r\n};\r\n\r\n/**\r\n * ActiveUserContext has the purpose of providing the currently active user\r\n * as well as related values, modifiers and related operations such as login\r\n * and logout.\r\n */\r\nconst ActiveUserContext =\r\n  createContext<ActiveUserContextType>(defaultContextValue);\r\nexport default ActiveUserContext;\r\n\r\n/**\r\n * Props for the ActiveUserContextProvider Component\r\n */\r\ntype ActiveUserContextProviderProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\n/**\r\n * ActiveUserContextProvider Component is used to provide the ActiveUserContext\r\n * to all child-components.\r\n * @param children consists of all the elements that are located inside the\r\n */\r\nexport const ActiveUserContextProvider = ({\r\n  children,\r\n}: ActiveUserContextProviderProps) => {\r\n  /**\r\n   * Try to load the user data that is stored inside the LocalStorage.\r\n   * If non is present, null will be returned.\r\n   */\r\n  const loadSavedUserData = (): Nullable<User> => {\r\n    const storeUser = localStorage.getItem(USER_DATA_LOCAL_STORAGE_KEY);\r\n    if (storeUser === null) return null;\r\n    return JSON.parse(storeUser);\r\n  };\r\n\r\n  // The following line defines the user state which is holding the user\r\n  // data inside this context.\r\n  const [user, setUser] = useState<Nullable<User>>(() => loadSavedUserData());\r\n  const navigate = useNavigate();\r\n  /**\r\n   * Update the user that is provided by the ActiveUserContext\r\n   * @param updatedUser\r\n   */\r\n  const setActiveUser = (updatedUser: User) => {\r\n    setUser(updatedUser);\r\n    localStorage.setItem(\r\n      USER_DATA_LOCAL_STORAGE_KEY,\r\n      JSON.stringify(updatedUser)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Remove all user and authorization related data from the localStorage\r\n   */\r\n  const resetAuthorization = () => {\r\n    // Reset the stored data inside the AuthorityService.\r\n    AuthorityService.clearAuthorities();\r\n    // Clear all data from the localStorage.\r\n    localStorage.clear();\r\n    // Set the user, which is stored inside the context to null.\r\n    setUser(null);\r\n  };\r\n\r\n  /**\r\n   * Logout the currently active user by resetting the stored user data\r\n   * and redirecting to the LoginPage.\r\n   */\r\n  const logout = () => {\r\n    // If no token is saved inside the local storage clear the localStorage directly\r\n    if (localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY) === null) {\r\n      resetAuthorization();\r\n      return;\r\n    }\r\n    // If a token is present send a logout-request and clear the localStorage afterwards\r\n    api.get(\"/logout\").finally(resetAuthorization);\r\n    //navigate to login page\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  /**\r\n   * Login with the provided credentials. If successful the current user gets\r\n   * updated and stored inside the context. Also the JWT-Token for further\r\n   * request based authentication is stored inside the localStorage.\r\n   * @param email\r\n   * @param password\r\n   */\r\n  const login = async (email: string, password: string) => {\r\n    await api.post(\"user/login\", { email, password }).then((response: any) => {\r\n      console.log(response.headers.authorization);\r\n      localStorage.setItem(\r\n        TOKEN_LOCAL_STORAGE_KEY,\r\n        response.headers.authorization\r\n      );\r\n      setActiveUser(response.data);\r\n      return true;\r\n    });\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Request the user data for the currently active user from the api\r\n   * and save it to the context-state.\r\n   */\r\n  const loadActiveUser = () => {\r\n    return user\r\n      ? UserService.getUser(user.id).then((res: any) => {\r\n          setActiveUser(res);\r\n        })\r\n      : null;\r\n  };\r\n\r\n  function activeUserHasRole(roleToCheck: keyof typeof roles): boolean {\r\n    return user ? user.roles.some((role) => role.name === roleToCheck) : false;\r\n  }\r\n\r\n  /**\r\n   * Try to load the user-object from the localStorage if present.\r\n   * This is done automatically on the first render of this component.\r\n   */\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(TOKEN_LOCAL_STORAGE_KEY);\r\n    if (token !== null) {\r\n      loadActiveUser();\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * If the user state is updated and the user is not equal to null,\r\n   * the data used in the AuthorityService as well as the data stored inside\r\n   * the localStorage will be updated with the new user-data.\r\n   */\r\n  useEffect(() => {\r\n    if (user !== null) {\r\n      AuthorityService.initAuthoritySet(user);\r\n      localStorage.setItem(USER_DATA_LOCAL_STORAGE_KEY, JSON.stringify(user));\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <div>\r\n      <ActiveUserContext.Provider\r\n        value={{\r\n          user,\r\n          setActiveUser,\r\n          login,\r\n          logout,\r\n          loadActiveUser,\r\n          checkRole: activeUserHasRole,\r\n        }}\r\n      >\r\n        {children}\r\n      </ActiveUserContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}