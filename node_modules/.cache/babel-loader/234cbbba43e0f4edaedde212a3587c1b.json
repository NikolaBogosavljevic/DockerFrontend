{"ast":null,"code":"import api from '../config/Api';\nconst ImageService = {\n  getImage: async imageID => {\n    const {\n      data\n    } = await api.get(`/imagepost/${imageID}`);\n    return data;\n  },\n  updateMovie: async params => {\n    const res = await api.put(`/movies/${params.id}`, {\n      ...params,\n      \"Release Date\": params.ReleaseDate\n    });\n    if (res && res.status === 200) {\n      console.log(\"movie successfully updated\");\n    }\n  },\n  createImage: async params => {\n    const res = await api.post(\"/imagepost/\", params);\n    if (res && res.status === 200) {\n      console.log(\"image successfully created\");\n    }\n  },\n  getAllImages: async () => {\n    try {\n      const response = await api.get(\"/imagepost/\");\n      return response.data;\n    } catch (error) {\n      console.error(\"ERRORRRRRRRR\", error);\n      return [];\n    }\n  },\n  deleteImage: () => {\n    return api.delete(`/`);\n  }\n};\nexport default ImageService;","map":{"version":3,"names":["api","ImageService","getImage","imageID","data","get","updateMovie","params","res","put","id","ReleaseDate","status","console","log","createImage","post","getAllImages","response","error","deleteImage","delete"],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/Services/ImageService.tsx"],"sourcesContent":["import api from '../config/Api';\r\nimport { User } from '../types/models/User.model';\r\nexport type Image_Post = {\r\n  id: number;\r\n  image: string;\r\n  description: string;\r\n  likes: number;\r\n  author: User;\r\n};\r\n\r\ntype AddImageRequest = {\r\n  image: string;\r\n  description: string | null;\r\n author: User;\r\n \r\n};\r\nconst ImageService = {\r\n  getImage: async (imageID: string): Promise<Image_Post> => {\r\n    const { data } = await api.get<Image_Post>(`/imagepost/${imageID}`);\r\n    return data;\r\n  },\r\n\r\n  updateMovie: async (params: Image_Post) => {\r\n    const res = await api.put(`/movies/${params.id}`, {...params, \"Release Date\": params.ReleaseDate});\r\n    if (res && res.status === 200) {\r\n      console.log(\"movie successfully updated\");\r\n    }\r\n  },\r\n\r\n  createImage: async (params: AddImageRequest) => {\r\n    const res = await api.post(\"/imagepost/\", params);\r\n    if (res && res.status === 200) {\r\n      console.log(\"image successfully created\");\r\n    }\r\n  },\r\n\r\n  getAllImages: async () => {\r\n    try {\r\n      const response = await api.get(\"/imagepost/\");\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"ERRORRRRRRRR\", error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  deleteImage: () => {\r\n    return api.delete(`/`);\r\n  },\r\n};\r\n\r\nexport default ImageService;\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,eAAe;AAgB/B,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,MAAOC,OAAe,IAA0B;IACxD,MAAM;MAAEC;IAAK,CAAC,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAc,cAAaF,OAAQ,EAAC,CAAC;IACnE,OAAOC,IAAI;EACb,CAAC;EAEDE,WAAW,EAAE,MAAOC,MAAkB,IAAK;IACzC,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAE,WAAUF,MAAM,CAACG,EAAG,EAAC,EAAE;MAAC,GAAGH,MAAM;MAAE,cAAc,EAAEA,MAAM,CAACI;IAAW,CAAC,CAAC;IAClG,IAAIH,GAAG,IAAIA,GAAG,CAACI,MAAM,KAAK,GAAG,EAAE;MAC7BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C;EACF,CAAC;EAEDC,WAAW,EAAE,MAAOR,MAAuB,IAAK;IAC9C,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACgB,IAAI,CAAC,aAAa,EAAET,MAAM,CAAC;IACjD,IAAIC,GAAG,IAAIA,GAAG,CAACI,MAAM,KAAK,GAAG,EAAE;MAC7BC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IAC3C;EACF,CAAC;EAEDG,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMlB,GAAG,CAACK,GAAG,CAAC,aAAa,CAAC;MAC7C,OAAOa,QAAQ,CAACd,IAAI;IACtB,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdN,OAAO,CAACM,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,OAAO,EAAE;IACX;EACF,CAAC;EAEDC,WAAW,EAAEA,CAAA,KAAM;IACjB,OAAOpB,GAAG,CAACqB,MAAM,CAAE,GAAE,CAAC;EACxB;AACF,CAAC;AAED,eAAepB,YAAY"},"metadata":{},"sourceType":"module"}