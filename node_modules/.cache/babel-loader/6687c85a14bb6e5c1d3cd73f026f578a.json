{"ast":null,"code":"import axios from \"axios\";\n\n/**\r\n * isDev returns a boolean if the application is running in development-mode.\r\n */\nconst isDev = () => !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\n\n/**\r\n * Create an Axios instance for the api.\r\n */\nconst createAPI = () => {\n  return axios.create({\n    baseURL: process.env.REACT_APP_BASEURL\n  });\n};\n\n/**\r\n * api constant is the axios-instance used for all requests to the rest-api.\r\n */\nconst api = createAPI();\n\n/**\r\n * Set the Authorization header on each request equal to the token which\r\n * is stored inside the localStorage if a user is authenticated.\r\n */\napi.interceptors.request.use(request => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    request.headers.Authorization = token;\n  }\n  return request;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\r\n * Log outgoing requests if the environment is in development-mode\r\n */\napi.interceptors.request.use(request => {\n  if (isDev() && request.method) {\n    const info = `REQUEST ${request.method.toLocaleUpperCase()} ${request.url}`;\n    if (request.method.toLocaleLowerCase() === \"get\") {\n      console.debug(info);\n    } else {\n      console.debug(info, request.data);\n    }\n  }\n  return request;\n}, Promise.reject);\n\n/**\r\n * Log incoming responses if the environment is in development-mode\r\n */\napi.interceptors.response.use(response => {\n  if (isDev() && response.config && response.config.method) {\n    console.debug(`RESPONSE ${response.config.method.toLocaleUpperCase()} ${response.config.url}`, response.data);\n  }\n  return response;\n}, error => Promise.reject(error));\nexport default api;","map":{"version":3,"names":["axios","isDev","process","env","NODE_ENV","createAPI","create","baseURL","REACT_APP_BASEURL","api","interceptors","request","use","token","localStorage","getItem","headers","Authorization","error","Promise","reject","method","info","toLocaleUpperCase","url","toLocaleLowerCase","console","debug","data","response","config"],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/config/Api.ts"],"sourcesContent":["import axios, { AxiosInstance } from \"axios\";\r\n\r\n/**\r\n * isDev returns a boolean if the application is running in development-mode.\r\n */\r\nconst isDev = (): boolean => !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\r\n\r\n/**\r\n * Create an Axios instance for the api.\r\n */\r\nconst createAPI = (): AxiosInstance => {\r\n  return axios.create({ baseURL: process.env.REACT_APP_BASEURL });\r\n};\r\n\r\n/**\r\n * api constant is the axios-instance used for all requests to the rest-api.\r\n */\r\nconst api: AxiosInstance = createAPI();\r\n\r\n/**\r\n * Set the Authorization header on each request equal to the token which\r\n * is stored inside the localStorage if a user is authenticated.\r\n */\r\napi.interceptors.request.use(\r\n  (request) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      request.headers.Authorization = token;\r\n    }\r\n    return request;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n/**\r\n * Log outgoing requests if the environment is in development-mode\r\n */\r\napi.interceptors.request.use((request) => {\r\n  if (isDev() && request.method) {\r\n    const info = `REQUEST ${request.method.toLocaleUpperCase()} ${request.url}`;\r\n    if (request.method.toLocaleLowerCase() === \"get\") {\r\n      console.debug(info);\r\n    } else {\r\n      console.debug(info, request.data);\r\n    }\r\n  }\r\n  return request;\r\n}, Promise.reject);\r\n\r\n/**\r\n * Log incoming responses if the environment is in development-mode\r\n */\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    if (isDev() && response.config && response.config.method) {\r\n      console.debug(\r\n        `RESPONSE ${response.config.method.toLocaleUpperCase()} ${response.config.url}`,\r\n        response.data\r\n      );\r\n    }\r\n    return response;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAyB,OAAO;;AAE5C;AACA;AACA;AACA,MAAMC,KAAK,GAAGA,CAAA,KAAe,CAACC,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAIF,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;;AAE5F;AACA;AACA;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAqB;EACrC,OAAOL,KAAK,CAACM,MAAM,CAAC;IAAEC,OAAO,EAAEL,OAAO,CAACC,GAAG,CAACK;EAAkB,CAAC,CAAC;AACjE,CAAC;;AAED;AACA;AACA;AACA,MAAMC,GAAkB,GAAGJ,SAAS,CAAC,CAAC;;AAEtC;AACA;AACA;AACA;AACAI,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBD,OAAO,IAAK;EACX,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTF,OAAO,CAACK,OAAO,CAACC,aAAa,GAAGJ,KAAK;EACvC;EACA,OAAOF,OAAO;AAChB,CAAC,EACAO,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACA;AACAT,GAAG,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAAED,OAAO,IAAK;EACxC,IAAIV,KAAK,CAAC,CAAC,IAAIU,OAAO,CAACU,MAAM,EAAE;IAC7B,MAAMC,IAAI,GAAI,WAAUX,OAAO,CAACU,MAAM,CAACE,iBAAiB,CAAC,CAAE,IAAGZ,OAAO,CAACa,GAAI,EAAC;IAC3E,IAAIb,OAAO,CAACU,MAAM,CAACI,iBAAiB,CAAC,CAAC,KAAK,KAAK,EAAE;MAChDC,OAAO,CAACC,KAAK,CAACL,IAAI,CAAC;IACrB,CAAC,MAAM;MACLI,OAAO,CAACC,KAAK,CAACL,IAAI,EAAEX,OAAO,CAACiB,IAAI,CAAC;IACnC;EACF;EACA,OAAOjB,OAAO;AAChB,CAAC,EAAEQ,OAAO,CAACC,MAAM,CAAC;;AAElB;AACA;AACA;AACAX,GAAG,CAACC,YAAY,CAACmB,QAAQ,CAACjB,GAAG,CAC1BiB,QAAQ,IAAK;EACZ,IAAI5B,KAAK,CAAC,CAAC,IAAI4B,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,CAACT,MAAM,EAAE;IACxDK,OAAO,CAACC,KAAK,CACV,YAAWE,QAAQ,CAACC,MAAM,CAACT,MAAM,CAACE,iBAAiB,CAAC,CAAE,IAAGM,QAAQ,CAACC,MAAM,CAACN,GAAI,EAAC,EAC/EK,QAAQ,CAACD,IACX,CAAC;EACH;EACA,OAAOC,QAAQ;AACjB,CAAC,EACAX,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAeT,GAAG"},"metadata":{},"sourceType":"module"}