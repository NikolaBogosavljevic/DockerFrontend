{"ast":null,"code":"/*import api from '../config/Api';\r\nimport { User } from '../types/models/User.model';\r\nexport type Image_Post = {\r\n  id: number;\r\n  image: string;\r\n  description: string;\r\n  likes: number;\r\n  author: User;\r\n};\r\n\r\ntype AddImageRequest = {\r\n  image: string;\r\n  description: string | null;\r\n author: User;\r\n \r\n};\r\nconst ImageService = {\r\n  getImage: async (imageID: string): Promise<Image_Post> => {\r\n    const { data } = await api.get<Image_Post>(`/imagepost/${imageID}`);\r\n    return data;\r\n  },\r\n\r\n  updateMovie: async (params: Image_Post) => {\r\n    const res = await api.put(`/movies/${params.id}`, {...params, \"Release Date\": params.ReleaseDate});\r\n    if (res && res.status === 200) {\r\n      console.log(\"movie successfully updated\");\r\n    }\r\n  },\r\n\r\n  createImage: async (params: AddImageRequest) => {\r\n    const res = await api.post(\"/imagepost/\", params);\r\n    if (res && res.status === 200) {\r\n      console.log(\"image successfully created\");\r\n    }\r\n  },\r\n\r\n  getAllImages: async () => {\r\n    try {\r\n      const response = await api.get(\"/imagepost/\");\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"ERRORRRRRRRR\", error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  deleteImage: () => {\r\n    return api.delete(`/`);\r\n  },\r\n};\r\n\r\nexport default ImageService;*/","map":{"version":3,"names":[],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/Services/ImageService.tsx"],"sourcesContent":["/*import api from '../config/Api';\r\nimport { User } from '../types/models/User.model';\r\nexport type Image_Post = {\r\n  id: number;\r\n  image: string;\r\n  description: string;\r\n  likes: number;\r\n  author: User;\r\n};\r\n\r\ntype AddImageRequest = {\r\n  image: string;\r\n  description: string | null;\r\n author: User;\r\n \r\n};\r\nconst ImageService = {\r\n  getImage: async (imageID: string): Promise<Image_Post> => {\r\n    const { data } = await api.get<Image_Post>(`/imagepost/${imageID}`);\r\n    return data;\r\n  },\r\n\r\n  updateMovie: async (params: Image_Post) => {\r\n    const res = await api.put(`/movies/${params.id}`, {...params, \"Release Date\": params.ReleaseDate});\r\n    if (res && res.status === 200) {\r\n      console.log(\"movie successfully updated\");\r\n    }\r\n  },\r\n\r\n  createImage: async (params: AddImageRequest) => {\r\n    const res = await api.post(\"/imagepost/\", params);\r\n    if (res && res.status === 200) {\r\n      console.log(\"image successfully created\");\r\n    }\r\n  },\r\n\r\n  getAllImages: async () => {\r\n    try {\r\n      const response = await api.get(\"/imagepost/\");\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(\"ERRORRRRRRRR\", error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  deleteImage: () => {\r\n    return api.delete(`/`);\r\n  },\r\n};\r\n\r\nexport default ImageService;*/\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}