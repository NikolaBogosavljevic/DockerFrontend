{"ast":null,"code":"const authoritySet = new Set();\nconst AuthorityService = {\n  initAuthoritySet: (user = JSON.parse(localStorage.getItem('user') || '{}')) => {\n    const roles = user && user.roles ? user.roles : [];\n    roles.forEach(role => {\n      role.authorities.forEach(authority => {\n        authoritySet.add(authority.name);\n      });\n    });\n  },\n  hasAuthority: authority => {\n    AuthorityService.initAuthoritySet();\n    return authoritySet.has(authority);\n  },\n  hasAuthorities: authorities => {\n    AuthorityService.initAuthoritySet();\n    for (const element of authorities) {\n      if (!authoritySet.has(element)) {\n        return false;\n      }\n    }\n    return true;\n  },\n  hasAnyAuthority: authorities => {\n    for (const element of authorities) {\n      if (authoritySet.has(element)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  clearAuthorities: () => {\n    authoritySet.clear();\n  }\n};\nexport default AuthorityService;","map":{"version":3,"names":["authoritySet","Set","AuthorityService","initAuthoritySet","user","JSON","parse","localStorage","getItem","roles","forEach","role","authorities","authority","add","name","hasAuthority","has","hasAuthorities","element","hasAnyAuthority","clearAuthorities","clear"],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/Services/AuthorityService.ts"],"sourcesContent":["import { Authority } from '../types/models/Authority.model';\r\nimport { Role } from '../types/models/Role.model';\r\n\r\nconst authoritySet = new Set();\r\n\r\nconst AuthorityService = {\r\n  initAuthoritySet: (\r\n    user = JSON.parse(localStorage.getItem('user') || '{}')\r\n  ) => {\r\n    const roles = user && user.roles ? user.roles : [];\r\n    roles.forEach((role: Role) => {\r\n      role.authorities.forEach((authority: Authority) => {\r\n        authoritySet.add(authority.name);\r\n      });\r\n    });\r\n  },\r\n  \r\n  hasAuthority: (authority: Authority) => {\r\n    AuthorityService.initAuthoritySet();\r\n    return authoritySet.has(authority);\r\n  },\r\n  hasAuthorities: (authorities: Authority[]) => {\r\n    AuthorityService.initAuthoritySet();\r\n    for (const element of authorities) {\r\n      if (!authoritySet.has(element)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  },\r\n  hasAnyAuthority: (authorities: Authority[]) => {\r\n    for (const element of authorities) {\r\n      if (authoritySet.has(element)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  },\r\n  clearAuthorities: (): void => {\r\n    authoritySet.clear();\r\n  },\r\n};\r\n\r\nexport default AuthorityService;\r\n"],"mappings":"AAGA,MAAMA,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;AAE9B,MAAMC,gBAAgB,GAAG;EACvBC,gBAAgB,EAAEA,CAChBC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,KACpD;IACH,MAAMC,KAAK,GAAGL,IAAI,IAAIA,IAAI,CAACK,KAAK,GAAGL,IAAI,CAACK,KAAK,GAAG,EAAE;IAClDA,KAAK,CAACC,OAAO,CAAEC,IAAU,IAAK;MAC5BA,IAAI,CAACC,WAAW,CAACF,OAAO,CAAEG,SAAoB,IAAK;QACjDb,YAAY,CAACc,GAAG,CAACD,SAAS,CAACE,IAAI,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAEDC,YAAY,EAAGH,SAAoB,IAAK;IACtCX,gBAAgB,CAACC,gBAAgB,CAAC,CAAC;IACnC,OAAOH,YAAY,CAACiB,GAAG,CAACJ,SAAS,CAAC;EACpC,CAAC;EACDK,cAAc,EAAGN,WAAwB,IAAK;IAC5CV,gBAAgB,CAACC,gBAAgB,CAAC,CAAC;IACnC,KAAK,MAAMgB,OAAO,IAAIP,WAAW,EAAE;MACjC,IAAI,CAACZ,YAAY,CAACiB,GAAG,CAACE,OAAO,CAAC,EAAE;QAC9B,OAAO,KAAK;MACd;IACF;IACA,OAAO,IAAI;EACb,CAAC;EACDC,eAAe,EAAGR,WAAwB,IAAK;IAC7C,KAAK,MAAMO,OAAO,IAAIP,WAAW,EAAE;MACjC,IAAIZ,YAAY,CAACiB,GAAG,CAACE,OAAO,CAAC,EAAE;QAC7B,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd,CAAC;EACDE,gBAAgB,EAAEA,CAAA,KAAY;IAC5BrB,YAAY,CAACsB,KAAK,CAAC,CAAC;EACtB;AACF,CAAC;AAED,eAAepB,gBAAgB"},"metadata":{},"sourceType":"module"}