{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aurora Gjemaj\\\\ueK223_Gruppe5_Frontend\\\\src\\\\components\\\\pages\\\\UserPage\\\\ImagePage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport ImageForm from '../../molecules/UserForm/ImageForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImagePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [image, setImage] = useState({\n    id: 0,\n    image: \"\",\n    description: \"\",\n    likes: 0,\n    author: {\n      id: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      roles: []\n    }\n  });\n  const submitActionHandler = values => {\n    // Create a new FormData object to handle file upload\n    const formData = new FormData();\n    formData.append('image', values.image);\n    formData.append('description', values.description);\n\n    // Make a POST request to your backend endpoint for image creation\n    fetch('/api/your-image-endpoint', {\n      method: 'POST',\n      body: formData\n    }).then(response => {\n      if (response.ok) {\n        // Image successfully uploaded, navigate to the desired page\n        navigate('/images');\n      } else {\n        // Handle error cases here\n        console.error('Image upload failed.');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(ImageForm, {\n    image: image,\n    submitActionHandler: submitActionHandler\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 10\n  }, this);\n};\n_s(ImagePage, \"UR7zWqMWNnU1LmjR0XyYVfMJExs=\", false, function () {\n  return [useNavigate];\n});\n_c = ImagePage;\nexport default ImagePage;\nvar _c;\n$RefreshReg$(_c, \"ImagePage\");","map":{"version":3,"names":["React","useState","useNavigate","ImageForm","jsxDEV","_jsxDEV","ImagePage","_s","navigate","image","setImage","id","description","likes","author","email","firstName","lastName","roles","submitActionHandler","values","formData","FormData","append","fetch","method","body","then","response","ok","console","error","catch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aurora Gjemaj/ueK223_Gruppe5_Frontend/src/components/pages/UserPage/ImagePage.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Image_Post } from '../../../Services/ImageService';\r\nimport ImageForm from '../../molecules/UserForm/ImageForm';\r\n\r\nconst ImagePage = () => {\r\n  const navigate = useNavigate();\r\n  const [image, setImage] = useState<Image_Post>({\r\n    id: 0,\r\n    image: \"\",\r\n    description: \"\",\r\n    likes: 0,\r\n    author: {\r\n      id: \"\",\r\n      email: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      roles: [],\r\n  }});\r\n\r\n  const submitActionHandler = (values: Image_Post) => {\r\n    // Create a new FormData object to handle file upload\r\n    const formData = new FormData();\r\n    formData.append('image', values.image);\r\n    formData.append('description', values.description);\r\n\r\n    // Make a POST request to your backend endpoint for image creation\r\n    fetch('/api/your-image-endpoint', {\r\n      method: 'POST',\r\n      body: formData,\r\n    })\r\n      .then((response) => {\r\n        if (response.ok) {\r\n          // Image successfully uploaded, navigate to the desired page\r\n          navigate('/images');\r\n        } else {\r\n          // Handle error cases here\r\n          console.error('Image upload failed.');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error:', error);\r\n      });\r\n  };\r\n\r\n  return <ImageForm image={image} submitActionHandler={submitActionHandler} />;\r\n};\r\n\r\nexport default ImagePage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,OAAOC,SAAS,MAAM,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAa;IAC7CU,EAAE,EAAE,CAAC;IACLF,KAAK,EAAE,EAAE;IACTG,WAAW,EAAE,EAAE;IACfC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;MACNH,EAAE,EAAE,EAAE;MACNI,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,EAAE;MACbC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE;IACX;EAAC,CAAC,CAAC;EAEH,MAAMC,mBAAmB,GAAIC,MAAkB,IAAK;IAClD;IACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,MAAM,CAACX,KAAK,CAAC;IACtCY,QAAQ,CAACE,MAAM,CAAC,aAAa,EAAEH,MAAM,CAACR,WAAW,CAAC;;IAElD;IACAY,KAAK,CAAC,0BAA0B,EAAE;MAChCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEL;IACR,CAAC,CAAC,CACCM,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAIA,QAAQ,CAACC,EAAE,EAAE;QACf;QACArB,QAAQ,CAAC,SAAS,CAAC;MACrB,CAAC,MAAM;QACL;QACAsB,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACvC;IACF,CAAC,CAAC,CACDC,KAAK,CAAED,KAAK,IAAK;MAChBD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EAED,oBAAO1B,OAAA,CAACF,SAAS;IAACM,KAAK,EAAEA,KAAM;IAACU,mBAAmB,EAAEA;EAAoB;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC9E,CAAC;AAAC7B,EAAA,CAzCID,SAAS;EAAA,QACIJ,WAAW;AAAA;AAAAmC,EAAA,GADxB/B,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}